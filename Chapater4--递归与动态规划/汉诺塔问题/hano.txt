/*
汉诺塔问题
*/
#include<iostream>
#include <vector>
using namespace std;

class Solution{
public:
	/*
	Step1：移动1~n-1到中间
	Step2：移动n到最右端
	Step3：移动1~n-1到最右端
	*/
	void hano(int n, char* from, char* mid, char* to)
	{
		if(n<=0)
			return;
		if(n==1)
			printf("move from %s to %s\n", from, to);
		else
		{
			//Step1
			hano(n-1, from, to, mid);
			//Step2
			printf("move from %s to %s\n", from, to);
			//Step3
			hano(n-1, mid, from, to);
		}
	}


	/*
	递归版本
	题目是求当前状态是处在最优移动轨迹的第几步
	Step1：推导1-n个盘子从from移动到to的最优步骤数公式S(n)；由hano的step1-3可得S(n)=S(n-1)+1+S(n-1)，推得S(i) = 2^i-1;
	Step2：考察第i个盘子的位置(从第n个开始看)
			1）第i个盘子在from柱子上，那么看1~i-1盘子的状态,1~i-1盘子的目标是从from到mid上
			2）第i个盘子在to柱子上，那么hano中的step1和2肯定进行完了，起码走了S(i-1)+1=2^(i-1)步数，再看1~i-1盘子的状态,1~i-1盘子的目标是从mid到to
			3）第i个盘子在mid柱子上，不可能出现，返回-1
	O(N),O(N)
	*/
	int hano_advanced(vector<int> arr)
	{
		if(arr.size()==0)
			return -1;
		return helper(arr, arr.size()-1, 1,2,3);
	}
	int helper(vector<int> arr, int i, int left, int mid, int right)
	{
		if(i==-1)
			return 0;
		if(arr[i]!=left&&arr[i]!=right)
			return -1;
		else if(arr[i]==left)
			return helper(arr, i-1, left, right, mid);
		else if(arr[i]==right)
		{
			int temp = helper(arr,i-1,mid,left,right);
			if(temp==-1)
				return -1;
			return 1<<i + temp;//i是从0开始的
		}
	}

	/*
	非递归版本
	O(N),O(1)
	*/
	int hano_advanced2(vector<int>arr)
	{
		if(arr.size()==0)
			return -1;
		int from = 1;
		int mid = 2;
		int to = 3;
		int temp = 0;
		int res = 0;
		int i=arr.size()-1;
		while(i>=0)
		{
			if(arr[i]!=from&&arr[i]!=to)
				return -1;
			else if(arr[i]==from){
				temp = to;
				to = mid;
			}else{
				res += 1<<i;
				temp = from;
				from = mid;
			}
			mid = temp;
			i--;
		}
		return res;
	}
};

int main()
{
	Solution s;
	char* from = "left";
	char* mid = "mid";
	char* to = "right";
	int temp[] = {2,1};
	int count_  = sizeof(temp) / sizeof(int);
	vector<int> arr(temp, temp+count_);
	//cout<<s.hano_advanced(arr);
	cout<<s.hano_advanced2(arr);
	//s.hano(1, from, mid, to);
	return 0;
}