#include<iostream>
#include <vector>
using namespace std;

class Solution{
public:
	int pairNums(string s)
	{
		if(s.length()==0)
			return 0;
		return helper(s, 0);
	}

	/*
		递归函数p(i)(i表示s[0...i-1]已经调整好了，s[i...s.length()-1]的调整次数)，其中0<=i<=s.length()
		p(s.length)表示s[0...s.length()-1]都调整好了后面有没值了，所以返回1
		复杂度：
			时间O(2^N)
			空间O(N)
	*/
	int helper(string s, int start)
	{
		if(start==s.length())
			return 1;
		if(s[start]=='0')
			return 0;
		//取前一位
		int res = helper(s, start+1);
		//取前二位
		if(s[start]<='2' && s[start]>='1' && start+1<s.length() && s[start+1]<='9' && s[start+1]>='0')
			return res + helper(s, start+2);
		else
			return res;
	}

	//p(i)最多以来p(i+1)和p(i+2)所以可以用从后往前的进行顺序计算
	//pairNums2为数组形式，pariNums3为变量形式
	int pairNums2(string s)
	{
		if(s.length()==0)
			return 0;
		vector<int>dp(s.length()+1, 0);
		dp[s.length()] = 1;
		dp[s.length()-1] = s[s.length()-1]<='9' && s[s.length()-1]>'0' ? 1 : 0;
		for(int i=s.length()-2;i>=0;i--)
		{
			if(s[i]<='9' && s[i]>'0')
				dp[i] += dp[i+1];
			if((10*(s[i]-'0')+s[i+1]-'0')<27)
				dp[i] += dp[i+2];
		}
		return dp[0];
	}

	int pairNums3(string s)
	{
		if(s.length()==0)
			return 0;
		int cur = s[s.length()-1]=='0' ? 0 : 1;
		int next = 1;
		int temp = 0;
		for(int i=s.length()-2;i>=0;i--)
		{
			if(s[i]=='0')
			{
				next = cur;
				cur = 0;
			}
			else{
				temp = cur;
				if(10*(s[i]-'0')+s[i+1]-'0'<27)
					cur += next;
				next = temp;
			}
		}
	}
};

int main()
{
	Solution s;
	string ss = "1111";
	cout<<s.pairNums2(ss)<<endl;
	return 0;
}