/*
题目：换钱的最少货币数，补充题目
与之前题目唯一不同的地方是纸币不能重复使用
*/
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

class Solution{
public:
	/*
	思想：
		构造dp数组，dp[i][j]表示用arr[0...i]的任意货币能找j块钱的最小张数
		dp维度为[arr.size(), target+1]
	复杂度：
		时间：O(N*target)
		空间：O(N*target)
	*/
	int minCoins3(vector<int> arr, int target)
	{
		if (arr.size() == 0 || target < 0)
			return -1;
		int length = arr.size();
		vector<vector<int>> dp(length, vector<int>(target + 1));
		int max = INT_MAX;
		//!-----------改变1-----------!
		for (int j = 1; j < target+1; j++)
		{
			dp[0][j] = max;
			if (j == arr[0])
				dp[0][j] = 1;
		}

		int left = 0;//记录当前位置左侧j-arr[i]位置的值
		for (int i = 1; i < length; i++)
		{
			for (int j = 1; j < target+1; j++)
			{
				left = max;
				//!-----------改变2-----------!
				if (j - arr[i] >= 0 && dp[i-1][j - arr[i]] != max)
					left = dp[i-1][j - arr[i]] + 1;//假设用了1张arr[i]的面值，则问题变为求arr[0...i]换j-arr[i]块用的最少的情况
				dp[i][j] = min(dp[i - 1][j], left);
			}
		}

		return dp[length-1][target] == max ? -1 : dp[arr.size() - 1][target];
	}

	/*
	思路：
		优化minCoin1，由于每一行的更新只依赖上一行，所以只用一行的额外空间就够了
	复杂度：
		时间：O(N*target)
		空间：O(target)
	*/
	int minCoins4(vector<int> arr, int target)
	{
		int length = arr.size();
		if (length == 0 || target < 0)
			return -1;
		vector<int> dp(target + 1);
		int max = INT_MAX;
		for (int j = 1; j < target + 1; j++)
		{
			dp[j] = max;
			if (j == arr[0])
				dp[j] = 1;
		}

		int left = 0;
		for (int i = 1; i < length; i++)
		{
			//!-----------改变3：从右边往左边更新-----------!
			for (int j = target; j >=0; j--)
			{
				left = max;
				if (j - arr[i] >= 0 && dp[j - arr[i]] != max)
					left = dp[j - arr[i]] + 1;
				dp[j] = min(dp[j], left);
			}
		}
		return dp[target] == max ? -1 : dp[target];
	}
};

int main()
{
	//int arr[] = { 5, 2, 3 };
	//int arr[] = { 3, 5 };
	int arr[] = { 5, 2, 5, 3 };
	int count_ = sizeof(arr) / sizeof(int);
	vector<int> test(arr, arr + count_);
	int aim = 15;
	Solution s;
	//int res = s.minCoins3(test, aim);
	int res = s.minCoins4(test, aim);
	cout << res << endl;
	cout << endl;
}