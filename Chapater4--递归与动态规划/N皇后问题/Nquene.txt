/*
N皇后问题
*/
#include<iostream>
#include <vector>
using namespace std;

class Solution{
public:
	/*
	思路：递归
		1）考虑当[i,j]位置有皇后的时候，i）第i行不能有皇后，ii）第j列不能有皇后，iii）对于位置[a,b],若|i-a|=|j-b|说明[a,b]处于[i,j]的斜线位置也不能有皇后
		2）从第一行逐行开始递归，使用一个数组record记录皇后所处位置，record[i]表示第i行皇后所处的列
	*/
	int Nqueen(int n)
	{
		if(n<1)
			return 0;
		vector<int> record(n, 0);
		return process1(0, record, n);
	}

	int process1(int i, vector<int> record, int n)
	{
		if(i==n)
			return 1;
		int res = 0;
		for(int j=0;j<n;j++)
		{
			if(isValid(record, i, j)){
				record[i] = j;
				res += process1(i+1, record, n);
			}
		}
		return res;
	}

	//看当前位置row, col能不能放皇后
	bool isValid(vector<int> record, int row, int col)
	{
		for(int k=0;k<row;k++)
		{
			if(record[k]==col || abs(row-k)==abs(col-record[k]))
				return false;
		}
		return true;
	}

	int Nqueen2(int n)
	{
		if(n<1 || n>32)
			return 0;
		int upperLim = n==32 ? -1 : (1<<n) - 1;
		return process2(upperLim, 0, 0, 0);
	}

	int process2(int upperLim, int colLim, int leftDiaLim, int rightDiaLim)
	{
		if(colLim==upperLim)
			return 1;
		int pos = 0;
		int mostRightOne = 0;
		pos = upperLim & (~(colLim | leftDiaLim | rightDiaLim));
		int res = 0;
		while(pos!=0)
		{
			mostRightOne = pos & (~pos+1);
			pos = pos - mostRightOne;
			res += process2(upperLim, colLim | mostRightOne, (leftDiaLim | mostRightOne)<<1, (rightDiaLim | mostRightOne)>>1);
		}
		return res;
	}
};

int main()
{
	Solution s;
	int n = 10;
	cout<<s.Nqueen(n);
	getchar();
	return 0;
}