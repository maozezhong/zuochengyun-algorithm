#include<iostream>
#include<vector>
using namespace std;

class Solution
{
public:
	/*
	思路：暴力递归
	复杂度：O(2^N),因为递归有N层，然后f又两个g的分支，g也有两个f的分支
	*/
	int win1(vector<int> array)
	{
		if(array.size()==0)
			return 0;
		return max(f(array, 0, array.size()-1), g(array, 0, array.size()-1));
	}

	//表示当前玩家先拿的情况下，能得到的最高分数
	int f(vector<int> array, int start, int end)
	{
		if(start==end)
			return array[start];
		//1. 当前玩家拿最左边的牌，那么他就成为后拿array[start+1...end]牌的人
		//2. 当前玩家拿最右边的牌，那么他就成为后拿array[start...end-1]牌的人
		return max(array[start]+g(array, start+1,end), array[end]+g(array, start, end-1));
	}

	//表示当前玩家后拿的情况下，能得到的最高分数
	int g(vector<int>array, int start, int end)
	{
		if(start==end)
			return 0;
		//1. 既然前面的玩家聪明绝顶，那么他肯定会拿使他总得分最高的那一侧，那么当前玩家就只能拿剩下的得分低的了
		return min(f(array, start+1, end), f(array, start, end-1));
	}

	/*
	思路2：动态规划
	建立两个矩阵，f[i][j]表示函数f(array, i, j)的值；g[i][j]表示g(array,i,j)的值
	复杂度：
		空间：O(N^2)
		时间：O(N^2)
	*/
	int win2(vector<int> array)
	{
		if(array.size()==0)
			return 0;
		vector<vector<int>> f(array.size(), vector<int>(array.size(), 0));
		vector<vector<int>> g(array.size(), vector<int>(array.size(), 0));
		for(int j=0;j<array.size();j++)
		{
			f[j][j] = array[j];
			for(int i=j-1;i>=0;i--)
			{
				f[i][j] = max(array[i]+g[i+1][j], array[j]+g[i][j-1]);
				g[i][j] = min(f[i+1][j], f[i][j-1]);
			}
		}
		return max(f[0][array.size()-1], g[0][array.size()-1]);
	}
};

int main()
{
	Solution s;
	int temp[] = {1,100,4};
	vector<int> r(temp, temp+sizeof(temp) / sizeof(int));
	cout<<s.win2(r);
	system("pause");
	return 0;
}